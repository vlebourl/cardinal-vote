version: "3.8"

services:
  # PostgreSQL Database for Generalized Platform
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-voting_platform}
      - POSTGRES_USER=${POSTGRES_USER:-voting_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-voting_password_change_in_production}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-voting_user} -d ${POSTGRES_DB:-voting_platform}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voting-platform-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Generalized Voting Platform Application
  voting-platform:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-voting_user}:${POSTGRES_PASSWORD:-voting_password_change_in_production}@postgres:5432/${POSTGRES_DB:-voting_platform}
      # Application Configuration
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt_secret_key_change_in_production_extremely_long_and_secure}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      # Session Configuration (legacy compatibility)
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY:-session_secret_key_change_in_production_123456789}
      # Email Configuration (Mock for Development)
      - EMAIL_BACKEND=${EMAIL_BACKEND:-mock}
      - SMTP_HOST=${SMTP_HOST:-localhost}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@voting-platform.local}
      # File Storage Configuration
      - UPLOAD_PATH=${UPLOAD_PATH:-/app/uploads}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-10}
      # Super Admin Configuration (for platform management)
      - SUPER_ADMIN_EMAIL=${SUPER_ADMIN_EMAIL:-admin@voting-platform.local}
      - SUPER_ADMIN_PASSWORD=${SUPER_ADMIN_PASSWORD:-super_admin_password_change_in_production}
      # Legacy Admin Configuration (backwards compatibility)
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-cardinal_admin_2025}
    volumes:
      # Persistent storage for uploaded files
      - voting_uploads:/app/uploads
      # Persistent storage for logs
      - voting_logs:/app/logs
      # Legacy SQLite data (for migration)
      - cardinal_data:/app/data
      # Development mounts (uncomment for development)
      # - ./src:/app/src:ro
      # - ./templates:/app/templates:ro
      # - ./static:/app/static:ro
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8000/api/health', timeout=5)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.voting-platform.rule=Host(`voting.localhost`)"
      - "traefik.http.services.voting-platform.loadbalancer.server.port=8000"
    networks:
      - voting-platform-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Traefik reverse proxy for production-like setup
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - voting-platform-network
    restart: unless-stopped
    profiles:
      - traefik

volumes:
  # PostgreSQL database persistent storage
  postgres_data:
    driver: local
  # Application uploads persistent storage
  voting_uploads:
    driver: local
  # Application logs persistent storage
  voting_logs:
    driver: local
  # Legacy SQLite data (for migration)
  cardinal_data:
    driver: local

networks:
  voting-platform-network:
    driver: bridge
