[project]
name = "toveco-voting"
version = "1.1.1"
description = "Logo voting platform using value voting methodology"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "ToVÃ©Co Team" },
]
license = { text = "MIT" }
keywords = ["voting", "logo", "value-voting", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.0.0",
    "jinja2>=3.1.0",
    "bcrypt>=4.0.0",
    "itsdangerous>=2.1.0",
    "pillow>=10.0.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/toveco/voting"
Repository = "https://github.com/toveco/voting.git"
Issues = "https://github.com/toveco/voting/issues"

[project.scripts]
toveco-voting = "toveco_voting.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
    "coverage>=7.3.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/toveco_voting"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 88

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.bandit]
exclude_dirs = ["tests"]
skips = [
    "B101",  # assert_used (common in tests and assertions)
    "B104",  # hardcoded_bind_all_interfaces (0.0.0.0 binding for containers)
    "B112"   # try_except_continue (acceptable for non-critical operations)
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    "src",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "httpx>=0.28.1",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "coverage>=7.3.0",
    "pre-commit>=3.6.0",
    "types-aiofiles>=24.1.0.20250822",
    "types-psutil>=7.0.0.20250822",
    "bandit[toml]>=1.8.6",
    "pytest-cov>=6.2.1",
]
