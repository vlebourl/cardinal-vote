"""add_content_moderation_tables

Revision ID: bff158c3e8a6
Revises: 3f871632aa93
Create Date: 2025-09-09 18:27:44.827977

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "bff158c3e8a6"
down_revision: str | Sequence[str] | None = "3f871632aa93"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "vote_moderation_actions",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("vote_id", sa.UUID(), nullable=False),
        sa.Column("moderator_id", sa.UUID(), nullable=False),
        sa.Column("action_type", sa.String(length=50), nullable=False),
        sa.Column("reason", sa.Text(), nullable=False),
        sa.Column("previous_status", sa.String(length=20), nullable=True),
        sa.Column("new_status", sa.String(length=20), nullable=True),
        sa.Column(
            "additional_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "action_type IN ('close_vote', 'disable_vote', 'hide_vote', 'delete_vote', 'restore_vote', 'warning_issued')",
            name="check_action_type",
        ),
        sa.ForeignKeyConstraint(["moderator_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["vote_id"], ["generalized_votes.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_moderation_actions_created_at",
        "vote_moderation_actions",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "idx_moderation_actions_moderator_id",
        "vote_moderation_actions",
        ["moderator_id"],
        unique=False,
    )
    op.create_index(
        "idx_moderation_actions_vote_id",
        "vote_moderation_actions",
        ["vote_id"],
        unique=False,
    )
    op.create_table(
        "vote_moderation_flags",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("vote_id", sa.UUID(), nullable=False),
        sa.Column("flagger_id", sa.UUID(), nullable=True),
        sa.Column("flag_type", sa.String(length=50), nullable=False),
        sa.Column("reason", sa.Text(), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("reviewed_by", sa.UUID(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("review_notes", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "flag_type IN ('inappropriate_content', 'spam', 'harassment', 'copyright', 'other')",
            name="check_flag_type",
        ),
        sa.CheckConstraint(
            "status IN ('pending', 'approved', 'rejected', 'resolved')",
            name="check_flag_status",
        ),
        sa.ForeignKeyConstraint(["flagger_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["reviewed_by"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["vote_id"], ["generalized_votes.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_moderation_flags_created_at",
        "vote_moderation_flags",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "idx_moderation_flags_status", "vote_moderation_flags", ["status"], unique=False
    )
    op.create_index(
        "idx_moderation_flags_vote_id",
        "vote_moderation_flags",
        ["vote_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_moderation_flags_vote_id", table_name="vote_moderation_flags")
    op.drop_index("idx_moderation_flags_status", table_name="vote_moderation_flags")
    op.drop_index("idx_moderation_flags_created_at", table_name="vote_moderation_flags")
    op.drop_table("vote_moderation_flags")
    op.drop_index(
        "idx_moderation_actions_vote_id", table_name="vote_moderation_actions"
    )
    op.drop_index(
        "idx_moderation_actions_moderator_id", table_name="vote_moderation_actions"
    )
    op.drop_index(
        "idx_moderation_actions_created_at", table_name="vote_moderation_actions"
    )
    op.drop_table("vote_moderation_actions")
    # ### end Alembic commands ###
