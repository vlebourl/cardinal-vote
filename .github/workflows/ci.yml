name: Generalized Platform CI

on:
  push:
    branches: [main, develop/generalized-platform]
  pull_request:
    branches: [main, develop/generalized-platform]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: '3.11'

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python dependencies
        run: |
          uv sync --dev

      - name: Install JavaScript dependencies
        run: |
          npm ci

      - name: Run Python linting (ruff)
        run: |
          uv run ruff check src/

      - name: Run Python formatting check (ruff format)
        run: |
          uv run ruff format --check src/

      - name: Run type checking (mypy)
        run: |
          uv run mypy src/

      - name: Run JavaScript linting (ESLint)
        run: |
          npm run lint

      - name: Run JavaScript formatting check (Prettier)
        run: |
          npm run format:check

      - name: Run JavaScript unit tests (Jest)
        run: |
          npm test -- --coverage --verbose

      - name: Upload JavaScript test coverage
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage-report
          path: coverage/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run security scan (bandit)
        run: |
          uv add --dev bandit[toml]
          uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run dependency vulnerability scan
        run: |
          uv add --dev safety
          uv run safety check --json || true

  generalized-platform-tests:
    name: Generalized Platform Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: voting_platform_test
          POSTGRES_USER: voting_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run Alembic migrations
        run: |
          export DATABASE_URL=postgresql+asyncpg://voting_user:test_password@localhost:5432/voting_platform_test
          uv run alembic upgrade head
        env:
          JWT_SECRET_KEY: test-jwt-secret-for-ci
          SUPER_ADMIN_PASSWORD: test-super-admin-password

      - name: Test generalized platform infrastructure
        run: |
          export JWT_SECRET_KEY=test-jwt-secret-for-ci
          export SUPER_ADMIN_PASSWORD=test-super-admin-password
          export DATABASE_URL=postgresql+asyncpg://voting_user:test_password@localhost:5432/voting_platform_test

          # Test database connectivity and health
          uv run python -c "
          import asyncio
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          async def test():
              db = GeneralizedDatabaseManager()
              health = await db.health_check()
              assert health, 'Database health check failed'
              print('✅ Database health check passed')
          asyncio.run(test())
          "

          # Test JWT authentication system
          uv run python -c "
          import asyncio
          from src.cardinal_vote.auth_manager import GeneralizedAuthManager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.auth_manager import GeneralizedAuthManager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager

          async def test():
              auth = GeneralizedAuthManager()
              db = GeneralizedDatabaseManager()

              async with db.get_session() as session:
                  user = await auth.create_user(
                      email='test@example.com',
                      password='testpass123',
                      first_name='Test',
                      last_name='User',
                      session=session
                  )
                  tokens = auth.create_tokens(user)
                  assert 'access_token' in tokens
                  assert 'refresh_token' in tokens
                  print('✅ JWT authentication system working')

          asyncio.run(test())
          "

          # Test Row-Level Security
          uv run python -c "
          import asyncio
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.session_manager import session_manager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.session_manager import session_manager

          async def test():
              db = GeneralizedDatabaseManager()
              async with db.get_session() as session:
                  # Test RLS isolation
                  results = await session_manager.test_rls_isolation(session)
                  assert results.get('test_completed'), 'RLS test failed'
                  print('✅ Row-Level Security working')

          asyncio.run(test())
          "

      - name: Test email service integration
        run: |
          export JWT_SECRET_KEY=test-jwt-secret-for-ci
          export EMAIL_BACKEND=mock

          # Test email service
          uv run python -c "
          import asyncio
          from src.cardinal_vote.email_service import get_email_service
          from src.cardinal_vote.email_service import get_email_service

          async def test():
              email_service = get_email_service()
              result = await email_service.send_verification_email(
                  'test@example.com',
                  'Test User',
                  'test-token-123'
              )
              assert result, 'Email service test failed'
              print('✅ Email service working')

          asyncio.run(test())
          "

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: voting_platform_test
          POSTGRES_USER: voting_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install Python dependencies
        run: |
          uv sync --dev

      - name: Install accessibility testing tools
        run: |
          npm install -g pa11y @axe-core/cli lighthouse

      - name: Run Alembic migrations
        run: |
          export DATABASE_URL=postgresql+asyncpg://voting_user:test_password@localhost:5432/voting_platform_test
          uv run alembic upgrade head
        env:
          JWT_SECRET_KEY: test-jwt-secret-for-ci-extremely-long-key-64-chars-minimum
          SUPER_ADMIN_PASSWORD: test-super-admin-password-32-chars-minimum
          SUPER_ADMIN_EMAIL: test@admin.com

      - name: Start application for accessibility testing
        run: |
          export DATABASE_URL=postgresql+asyncpg://voting_user:test_password@localhost:5432/voting_platform_test
          export JWT_SECRET_KEY=test-jwt-secret-for-ci-extremely-long-key-64-chars-minimum
          export SUPER_ADMIN_PASSWORD=test-super-admin-password-32-chars-minimum
          export SUPER_ADMIN_EMAIL=test@admin.com
          export HOST=127.0.0.1
          export PORT=8000
          export DEBUG=false

          # Start application in background
          uv run python -m cardinal_vote.main &
          APP_PID=$!

          # Wait for application to start
          for i in {1..30}; do
            if curl -f -s http://127.0.0.1:8000/api/health >/dev/null 2>&1; then
              echo "✅ Application started successfully"
              break
            fi
            sleep 2
          done

          echo "APP_PID=$APP_PID" >> $GITHUB_ENV

      - name: Run WCAG 2.1 AA compliance tests
        run: |
          echo "🔍 Testing landing page accessibility..."

          # Test landing page with pa11y (WCAG 2.1 AA standard)
          pa11y --standard WCAG2AA --reporter json http://127.0.0.1:8000/ > pa11y-report.json || true

          # Check if there are any failures
          if [ -s pa11y-report.json ]; then
            echo "📋 Pa11y accessibility report:"
            cat pa11y-report.json

            # Count issues (will fail CI if critical issues found)
            ISSUES_COUNT=$(jq length pa11y-report.json)
            echo "Found $ISSUES_COUNT accessibility issues"

            if [ "$ISSUES_COUNT" -gt 10 ]; then
              echo "❌ Too many accessibility issues found ($ISSUES_COUNT). Maximum allowed: 10"
              echo "Please review and fix accessibility issues before merging."
              exit 1
            elif [ "$ISSUES_COUNT" -gt 0 ]; then
              echo "⚠️  $ISSUES_COUNT accessibility issues found (within acceptable range)"
            else
              echo "✅ No accessibility issues found"
            fi
          else
            echo "✅ No accessibility issues detected"
          fi

      - name: Run axe-core automated testing
        run: |
          echo "🔍 Running axe-core accessibility tests..."

          # Run axe-core tests
          npx axe-core-cli http://127.0.0.1:8000/ --reporter=json --output-dir=. --output-file=axe-report.json || true

          if [ -f axe-report.json ]; then
            echo "📋 Axe-core accessibility report:"
            cat axe-report.json

            # Check for violations
            VIOLATIONS=$(jq '.violations | length' axe-report.json)
            echo "Found $VIOLATIONS axe-core violations"

            if [ "$VIOLATIONS" -gt 0 ]; then
              echo "⚠️  Found $VIOLATIONS accessibility violations"
              jq '.violations[] | "\(.impact): \(.help)"' axe-report.json
            else
              echo "✅ No axe-core violations found"
            fi
          else
            echo "✅ No axe-core violations detected"
          fi

      - name: Test keyboard navigation
        run: |
          echo "⌨️  Testing keyboard navigation accessibility..."

          # Use headless browser to test keyboard navigation
          cat > test-keyboard-nav.js << 'EOF'
          const puppeteer = require('puppeteer');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();

            try {
              await page.goto('http://127.0.0.1:8000/');
              await page.waitForSelector('body');

              console.log('🔍 Testing tab navigation...');

              // Test tab navigation through interactive elements
              const focusableElements = await page.$$eval(
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
                elements => elements.length
              );

              console.log(`Found ${focusableElements} focusable elements`);

              // Test that login modal opens with keyboard
              await page.keyboard.press('Tab');
              await page.keyboard.press('Tab');
              await page.keyboard.press('Enter');

              // Wait for modal
              await page.waitForTimeout(500);

              const modalVisible = await page.$eval('#loginModal', el =>
                window.getComputedStyle(el).display !== 'none'
              );

              if (modalVisible) {
                console.log('✅ Keyboard navigation working - modal opened');
              } else {
                console.log('⚠️  Modal did not open with keyboard navigation');
              }

              console.log('✅ Keyboard navigation test completed');

            } catch (error) {
              console.log('⚠️  Keyboard navigation test failed:', error.message);
            } finally {
              await browser.close();
            }
          })();
          EOF

          # Install puppeteer and run test
          npm install puppeteer
          node test-keyboard-nav.js

      - name: Upload accessibility reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-reports
          path: |
            pa11y-report.json
            axe-report.json
          retention-days: 7

      - name: Cleanup application
        if: always()
        run: |
          if [ ! -z "${APP_PID:-}" ]; then
            kill $APP_PID || true
          fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for generalized platform
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          push: false
          tags: cardinal-vote-generalized:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose setup
        env:
          # Required environment variables for security validation
          POSTGRES_PASSWORD: test-postgres-password-for-ci-testing
          JWT_SECRET_KEY: test-jwt-secret-for-ci-extremely-long-key-64-chars-minimum
          SUPER_ADMIN_PASSWORD: test-super-admin-password-32-chars-minimum-for-ci
          ADMIN_PASSWORD: test-admin-password-for-ci-testing
          ADMIN_USERNAME: test-admin-user-for-ci
          SESSION_SECRET_KEY: test-session-secret-key-for-ci-testing-32-chars-minimum
        run: |
          # Test that docker-compose builds successfully
          docker compose build
          echo "✅ Docker Compose build successful"

          # Test PostgreSQL service starts
          docker compose up -d postgres
          sleep 10

          # Check PostgreSQL health
          docker compose exec postgres pg_isready -U voting_user -d voting_platform
          echo "✅ PostgreSQL service healthy"

          # Cleanup
          docker compose down -v

  pr-quality-gate:
    name: PR Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-quality, security, generalized-platform-tests, accessibility-tests, docker-build]

    steps:
      - name: PR Quality Check Passed
        run: |
          echo "🎉 Generalized Platform PR Ready!"
          echo ""
          echo "✅ Code quality checks passed"
          echo "✅ Security scan completed"
          echo "✅ Generalized platform tests passed"
          echo "✅ Accessibility tests passed (WCAG 2.1 AA)"
          echo "✅ Docker build successful"
          echo ""
          echo "This PR is ready for review! 🚀"
