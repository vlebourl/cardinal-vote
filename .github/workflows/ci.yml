name: Generalized Platform CI

on:
  push:
    branches: [main, develop/generalized-platform]
  pull_request:
    branches: [main, develop/generalized-platform]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run linting (ruff)
        run: |
          uv run ruff check src/

      - name: Run formatting check (ruff format)
        run: |
          uv run ruff format --check src/

      - name: Run type checking (mypy)
        run: |
          uv run mypy src/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run security scan (bandit)
        run: |
          uv add --dev bandit[toml]
          uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run dependency vulnerability scan
        run: |
          uv add --dev safety
          uv run safety check --json || true

  generalized-platform-tests:
    name: Generalized Platform Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: voting_platform_test
          POSTGRES_USER: voting_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run Alembic migrations
        run: |
          export DATABASE_URL=postgresql+asyncpg://voting_user:test_password@localhost:5432/voting_platform_test
          uv run alembic upgrade head
        env:
          JWT_SECRET_KEY: test-jwt-secret-for-ci
          SUPER_ADMIN_PASSWORD: test-super-admin-password

      - name: Test generalized platform infrastructure
        run: |
          export JWT_SECRET_KEY=test-jwt-secret-for-ci
          export SUPER_ADMIN_PASSWORD=test-super-admin-password
          export DATABASE_URL=postgresql+asyncpg://voting_user:test_password@localhost:5432/voting_platform_test

          # Test database connectivity and health
          uv run python -c "
          import asyncio
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          async def test():
              db = GeneralizedDatabaseManager()
              health = await db.health_check()
              assert health, 'Database health check failed'
              print('âœ… Database health check passed')
          asyncio.run(test())
          "

          # Test JWT authentication system
          uv run python -c "
          import asyncio
          from src.cardinal_vote.auth_manager import GeneralizedAuthManager
          from src.toveco_voting.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.auth_manager import GeneralizedAuthManager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager

          async def test():
              auth = GeneralizedAuthManager()
              db = GeneralizedDatabaseManager()

              async with db.get_session() as session:
                  user = await auth.create_user(
                      email='test@example.com',
                      password='testpass123',
                      first_name='Test',
                      last_name='User',
                      session=session
                  )
                  tokens = auth.create_tokens(user)
                  assert 'access_token' in tokens
                  assert 'refresh_token' in tokens
                  print('âœ… JWT authentication system working')

          asyncio.run(test())
          "

          # Test Row-Level Security
          uv run python -c "
          import asyncio
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.toveco_voting.session_manager import session_manager
          from src.cardinal_vote.database_manager import GeneralizedDatabaseManager
          from src.cardinal_vote.session_manager import session_manager

          async def test():
              db = GeneralizedDatabaseManager()
              async with db.get_session() as session:
                  # Test RLS isolation
                  results = await session_manager.test_rls_isolation(session)
                  assert results.get('test_completed'), 'RLS test failed'
                  print('âœ… Row-Level Security working')

          asyncio.run(test())
          "

      - name: Test email service integration
        run: |
          export JWT_SECRET_KEY=test-jwt-secret-for-ci
          export EMAIL_BACKEND=mock

          # Test email service
          uv run python -c "
          import asyncio
          from src.cardinal_vote.email_service import get_email_service
          from src.cardinal_vote.email_service import get_email_service

          async def test():
              email_service = get_email_service()
              result = await email_service.send_verification_email(
                  'test@example.com',
                  'Test User',
                  'test-token-123'
              )
              assert result, 'Email service test failed'
              print('âœ… Email service working')

          asyncio.run(test())
          "

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for generalized platform
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          push: false
          tags: toveco-generalized:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose setup
        run: |
          # Test that docker-compose builds successfully
          docker compose build
          echo "âœ… Docker Compose build successful"

          # Test PostgreSQL service starts
          docker compose up -d postgres
          sleep 10

          # Check PostgreSQL health
          docker compose exec postgres pg_isready -U voting_user -d voting_platform
          echo "âœ… PostgreSQL service healthy"

          # Cleanup
          docker compose down -v

  pr-quality-gate:
    name: PR Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-quality, security, generalized-platform-tests, docker-build]

    steps:
      - name: PR Quality Check Passed
        run: |
          echo "ðŸŽ‰ Generalized Platform PR Ready!"
          echo ""
          echo "âœ… Code quality checks passed"
          echo "âœ… Security scan completed"
          echo "âœ… Generalized platform tests passed"
          echo "âœ… Docker build successful"
          echo ""
          echo "This PR is ready for review! ðŸš€"
