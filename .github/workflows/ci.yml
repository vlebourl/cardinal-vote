name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run linting (ruff)
        run: |
          uv run ruff check src/ tests/

      - name: Run formatting check (ruff format)
        run: |
          uv run ruff format --check src/ tests/

      - name: Run type checking (mypy)
        run: |
          uv run mypy src/

      - name: Run tests with coverage
        run: |
          uv run pytest tests/test_api.py tests/test_main.py tests/test_database_integrity.py tests/test_comprehensive_api.py --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false # Don't fail CI if Codecov upload fails
          token: ${{ secrets.CODECOV_TOKEN }} # Optional for public repos, required for private

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run security scan (bandit)
        run: |
          uv add --dev bandit[toml]
          uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run dependency vulnerability scan
        run: |
          uv add --dev safety
          uv run safety check --json || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          tags: toveco-voting:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Create test environment file
          cat > test.env << EOF
          ADMIN_USERNAME=test-admin
          ADMIN_PASSWORD=test-password-123
          SESSION_SECRET_KEY=test-session-key-for-testing-only
          DATABASE_PATH=/app/data/votes.db
          HOST=0.0.0.0
          PORT=8000
          EOF

          # Test 1: Configuration validation (updated for installed package)
          echo "Testing configuration validation..."
          docker run --rm \
            --env-file test.env \
            -v $(pwd)/logos:/app/logos:ro \
            toveco-voting:test \
            python -c "from toveco_voting.config import settings; settings.validate_security(); print('âœ“ Configuration validation passed')"

          # Test 2: Dependency availability check
          echo "Testing dependency availability..."
          docker run --rm \
            --env-file test.env \
            toveco-voting:test \
            python -c "import fastapi, uvicorn, sqlalchemy; print('âœ“ All dependencies available')"

          # Test 3: Application import check
          echo "Testing application import..."
          docker run --rm \
            --env-file test.env \
            toveco-voting:test \
            python -c "from toveco_voting.main import app; print('âœ“ Application imports successfully')"

          # Test 4: Container startup test (30 second timeout)
          echo "Testing container startup and health endpoint..."

          # Start container in background
          CONTAINER_ID=$(docker run -d \
            --env-file test.env \
            -v $(pwd)/logos:/app/logos:ro \
            -p 8888:8000 \
            toveco-voting:test)

          echo "Container ID: $CONTAINER_ID"

          # Wait for startup and test health endpoint
          for i in {1..30}; do
            echo "Attempt $i/30: Testing health endpoint..."
            if curl -f http://localhost:8888/api/health > /dev/null 2>&1; then
              echo "âœ“ Container started successfully and health endpoint is responsive"
              docker stop $CONTAINER_ID
              docker logs $CONTAINER_ID
              exit 0
            fi
            sleep 1
          done

          # If we get here, the test failed
          echo "âœ— Container startup failed or health endpoint not responsive"
          echo "Container logs:"
          docker logs $CONTAINER_ID
          docker stop $CONTAINER_ID
          exit 1

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [test, docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run integration tests
        run: |
          export ADMIN_USERNAME=test-admin
          export ADMIN_PASSWORD=test-password-123
          export SESSION_SECRET_KEY=test-session-key-for-testing-only
          uv run pytest tests/ -v --tb=short -k "integration or end_to_end"
        env:
          DATABASE_PATH: test_votes.db

  pr-quality-gate:
    name: PR Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test, security, docker-build, integration]

    steps:
      - name: PR Quality Check Passed
        run: |
          echo "âœ… All quality checks passed!"
          echo "âœ… Tests passed"
          echo "âœ… Security scan completed"
          echo "âœ… Docker build successful"
          echo "âœ… Integration tests passed"
          echo ""
          echo "This PR is ready for review! ðŸŽ‰"
