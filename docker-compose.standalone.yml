version: '3.8'

# Standalone production deployment for Cardinal Vote platform
# Usage: docker-compose -f docker-compose.standalone.yml up -d

services:
  # PostgreSQL Database for Cardinal Vote Standalone
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cardinal_vote}
      - POSTGRES_USER=${POSTGRES_USER:-cardinal_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cardinal_password_change_in_production}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - cardinal_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-cardinal_user} -d ${POSTGRES_DB:-cardinal_vote}'
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cardinal-network
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
        compress: 'true'

  cardinal-voting:
    image: cardinal-voting:latest
    ports:
      - '${PORT:-8000}:8000'
    depends_on:
      postgres:
        condition: service_healthy

    # Environment variables from .env file
    environment:
      # Database Configuration - PostgreSQL
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-cardinal_user}:${POSTGRES_PASSWORD:-cardinal_password_change_in_production}@postgres:5432/${POSTGRES_DB:-cardinal_vote}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - DEBUG=${DEBUG:-false}
      - CARDINAL_ENV=${CARDINAL_ENV:-production}
      - APP_NAME=${APP_NAME:-Cardinal Vote Platform}
      - APP_VERSION=${APP_VERSION:-0.1.0}

      # Security settings
      - SECURE_HEADERS=${SECURE_HEADERS:-true}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - MAX_VOTES_PER_IP_PER_HOUR=${MAX_VOTES_PER_IP_PER_HOUR:-5}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:8000}

      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt_secret_key_change_in_production_extremely_long_and_secure}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}

      # Super Admin Configuration
      - SUPER_ADMIN_EMAIL=${SUPER_ADMIN_EMAIL:-admin@cardinal-vote.local}
      - SUPER_ADMIN_PASSWORD=${SUPER_ADMIN_PASSWORD:-super_admin_password_change_in_production}

      # Legacy Admin credentials (backwards compatibility)
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY}
      - SESSION_LIFETIME_HOURS=${SESSION_LIFETIME_HOURS:-8}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}

      # Voting configuration
      - MIN_RATING=${MIN_RATING:--2}
      - MAX_RATING=${MAX_RATING:-2}
      - MAX_VOTER_NAME_LENGTH=${MAX_VOTER_NAME_LENGTH:-50}
      - EXPECTED_LOGO_COUNT=${EXPECTED_LOGO_COUNT:-11}
      - LOGO_PREFIX=${LOGO_PREFIX:-cardinal}
      - LOGO_EXTENSION=${LOGO_EXTENSION:-.png}

    # Persistent data storage
    volumes:
      - cardinal_uploads:/app/uploads
      - cardinal_logs:/app/logs
    networks:
      - cardinal-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    # Health check
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Logging configuration
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
        compress: 'true'

    # Restart policy
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  # PostgreSQL database persistent storage
  cardinal_postgres_data:
    driver: local
    labels:
      - 'backup.enable=true'
      - 'backup.path=/var/lib/postgresql/data'

  # Application uploads persistent storage
  cardinal_uploads:
    driver: local
    labels:
      - 'backup.enable=true'
      - 'backup.path=/app/uploads'

  # Application logs persistent storage
  cardinal_logs:
    driver: local
    labels:
      - 'backup.enable=false'

networks:
  cardinal-network:
    driver: bridge
